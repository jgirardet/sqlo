A faire:

## en cours

- ForeignKey pour update

## situations possibles

1 select[Entity] => one, many, fetch, optional
2 select[Entity[pk_id]]=> one ou optional
3 select[Entitu[pk_id]].relations => one many fetch optional

4 update[Entity] => execute
5 update[Entity[pk_id]] => execute
6 update[Entity( pk_id )] => execute

7 update[ Entity] => one, many, fetch, optional
8 update[<< Entity[pk_id]] => one
9update[<< Entity(pk_id)] => one  
10 update[<< Entity[pk_id].relations] => one, many, fetch
11 update[<< Entity(pk_id).relations] => one , many, fetch

## propositions : pard défault entre parenthèse

1-3-7 : expressoins régulières : .,\*,+,? => fetch[(one), many, optional,fetch]
2: ? => rien,? fetch[(one), optional]
4,5,6: rien => execute
10, 11: rien,\*,+ => fetch[(one), many, fetch]
8, 9 : rien => fetch_one

# avant de passe à la suite

- update avec where
- fixer create pour ne plus utilsier des sqlos as option

# Bug:

- histoire de drop avec clippy et update ??
- Serializer de create fn et fk doit retourner null et non empty string

# à faire peut être :

- a'& str non supporté : il faut supporter les lifetime de la struct pout cela.
  ensuite supporter a'str dans types
- to_json method

## Faire pour tuer le temps:

-test sqlo\*set de query

- test Vec<u8>

# Passage à pgsql

- any, all
